
cronometro.elf:     file format elf32-littlenios2
cronometro.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000180

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000041c memsz 0x0000041c flags r-x
    LOAD off    0x00002000 vaddr 0x00010000 paddr 0x0000043c align 2**12
         filesz 0x00000004 memsz 0x0000011c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000002bc  00000180  00000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  00010000  00000440  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rwdata       00000004  00010000  0000043c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000118  00010004  00000440  00002004  2**2
                  ALLOC, SMALL_DATA
  6 .rom_0        00000000  00000440  00000440  00002004  2**0
                  CONTENTS
  7 .ram_0        00000000  0001011c  0001011c  00002004  2**0
                  CONTENTS
  8 .comment      0000002d  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000230  00000000  00000000  00002038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   00001361  00000000  00000000  00002268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00000bc6  00000000  00000000  000035c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   000009e3  00000000  00000000  0000418f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_frame  00000238  00000000  00000000  00004b74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0000090e  00000000  00000000  00004dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000010  00000000  00000000  000056bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000070  00000000  00000000  000056d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000009a  00000000  00000000  00005740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 000004fa  00000000  00000000  000057da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 000003c8  00000000  00000000  00005cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .thread_model 00000003  00000000  00000000  000070d5  2**0
                  CONTENTS, READONLY
 21 .cpu          0000000c  00000000  00000000  000070d8  2**0
                  CONTENTS, READONLY
 22 .qsys         00000001  00000000  00000000  000070e4  2**0
                  CONTENTS, READONLY
 23 .simulation_enabled 00000001  00000000  00000000  000070e5  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000004  00000000  00000000  000070e6  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000004  00000000  00000000  000070ea  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000004  00000000  00000000  000070ee  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  000070f2  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000024  00000000  00000000  000070fa  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0003c1ec  00000000  00000000  0000711e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000180 l    d  .text	00000000 .text
00010000 l    d  .rodata	00000000 .rodata
00010000 l    d  .rwdata	00000000 .rwdata
00010004 l    d  .bss	00000000 .bss
00000440 l    d  .rom_0	00000000 .rom_0
0001011c l    d  .ram_0	00000000 .ram_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    df *ABS*	00000000 crt0.o
000001b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
000001bc l     F .text	00000028 timer_irs
00010004 l     O .bss	00000004 leds
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcpy.c
00010018 g     O .bss	00000004 alt_instruction_exception_handler
00000390 g     F .text	0000002c alt_main
0001001c g     O .bss	00000100 alt_irq
0000043c g       *ABS*	00000000 __flash_rwdata_start
0000040c g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00010010 g     O .bss	00000004 alt_argv
00018000 g       *ABS*	00000000 _gp
00000414 g     F .text	00000028 memcpy
000003e8 g     F .text	00000024 alt_exception_cause_generated_bad_addr
0001011c g       *ABS*	00000000 __bss_end
000002a4 g     F .text	00000068 alt_iic_isr_register
00010000 g       *ABS*	00000000 __alt_mem_ram_0
0000028c g     F .text	00000018 alt_ic_irq_enabled
00010008 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	00000060 alt_irq_handler
000003e0 g     F .text	00000004 alt_dcache_flush_all
00010004 g       *ABS*	00000000 __ram_rwdata_end
00010000 g       *ABS*	00000000 __ram_rodata_end
0001011c g       *ABS*	00000000 end
0000015c g     F .exceptions	00000024 alt_instruction_exception_entry
00014000 g       *ABS*	00000000 __alt_stack_pointer
00000180 g     F .text	0000003c _start
000003dc g     F .text	00000004 alt_sys_init
00010000 g       *ABS*	00000000 __ram_rwdata_start
00010000 g       *ABS*	00000000 __ram_rodata_start
0001011c g       *ABS*	00000000 __alt_stack_base
00010004 g       *ABS*	00000000 __bss_start
000001e4 g     F .text	00000034 main
0001000c g     O .bss	00000004 alt_envp
0000043c g       *ABS*	00000000 __flash_rodata_start
000003bc g     F .text	00000020 alt_irq_init
00010014 g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000218 g     F .text	00000004 alt_ic_isr_register
00010004 g       *ABS*	00000000 _edata
0001011c g       *ABS*	00000000 _end
00000180 g       *ABS*	00000000 __ram_exceptions_end
00000254 g     F .text	00000038 alt_ic_irq_disable
00014000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000000 g       *ABS*	00000000 __alt_mem_rom_0
0000000c g       .entry	00000000 _exit
000003e4 g     F .text	00000004 alt_icache_flush_all
00010000 g     O .rwdata	00000004 alt_priority_mask
0000021c g     F .text	00000038 alt_ic_irq_enable
0000030c g     F .text	00000084 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08406014 	ori	at,at,384
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
  94:	e93fff04 	addi	r4,ea,-4
  98:	000015c0 	call	15c <alt_instruction_exception_entry>
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>
  a0:	ebffff04 	addi	r15,ea,-4
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defffe04 	addi	sp,sp,-8
 100:	dfc00115 	stw	ra,4(sp)
 104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 10c:	04000074 	movhi	r16,1
 110:	84000704 	addi	r16,r16,28
    i = 0;
 114:	0005883a 	mov	r2,zero
    mask = 1;
 118:	00c00044 	movi	r3,1
      if (active & mask)
 11c:	20ca703a 	and	r5,r4,r3
 120:	28000b26 	beq	r5,zero,150 <alt_irq_handler+0x54>
        alt_irq[i].handler(alt_irq[i].context); 
 124:	100490fa 	slli	r2,r2,3
 128:	8085883a 	add	r2,r16,r2
 12c:	10c00017 	ldw	r3,0(r2)
 130:	11000117 	ldw	r4,4(r2)
 134:	183ee83a 	callr	r3
 138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 13c:	203ff51e 	bne	r4,zero,114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 140:	dfc00117 	ldw	ra,4(sp)
 144:	dc000017 	ldw	r16,0(sp)
 148:	dec00204 	addi	sp,sp,8
 14c:	f800283a 	ret
      mask <<= 1;
 150:	1806907a 	slli	r3,r3,1
      i++;
 154:	10800044 	addi	r2,r2,1
      if (active & mask)
 158:	003ff006 	br	11c <alt_irq_handler+0x20>

0000015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 15c:	d0a00617 	ldw	r2,-32744(gp)
{
 160:	200b883a 	mov	r5,r4
  if(alt_instruction_exception_handler) {
 164:	10000326 	beq	r2,zero,174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 168:	000d883a 	mov	r6,zero
 16c:	013fffc4 	movi	r4,-1
 170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
 178:	0005883a 	mov	r2,zero
 17c:	f800283a 	ret

Disassembly of section .text:

00000180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 180:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
 184:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
 188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
 18c:	d6a00014 	ori	gp,gp,32768
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 190:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
 194:	10800114 	ori	r2,r2,4

    movhi r3, %hi(__bss_end)
 198:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
 19c:	18c04714 	ori	r3,r3,284

    beq r2, r3, 1f
 1a0:	10c00326 	beq	r2,r3,1b0 <_start+0x30>

0:
    stw zero, (r2)
 1a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 1a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 1ac:	10fffd36 	bltu	r2,r3,1a4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1b0:	000030c0 	call	30c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1b4:	00003900 	call	390 <alt_main>

000001b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1b8:	003fff06 	br	1b8 <alt_after_alt_main>

000001bc <timer_irs>:

static void timer_irs(void *context)
{
	(void)context;

	leds = leds << 1 | (IORD_ALTERA_AVALON_PIO_DATA(PIO_SWITCH_0_BASE) & 1);
 1bc:	d0e00117 	ldw	r3,-32764(gp)
 1c0:	00800134 	movhi	r2,4
 1c4:	1806907a 	slli	r3,r3,1
 1c8:	10800037 	ldwio	r2,0(r2)
 1cc:	1080004c 	andi	r2,r2,1
 1d0:	10c4b03a 	or	r2,r2,r3
 1d4:	d0a00115 	stw	r2,-32764(gp)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_LEDS_0_BASE, leds);
 1d8:	00c000f4 	movhi	r3,3
 1dc:	18800035 	stwio	r2,0(r3)
}
 1e0:	f800283a 	ret

000001e4 <main>:

int main()
{ 
 1e4:	defffe04 	addi	sp,sp,-8
	alt_ic_isr_register(
 1e8:	01800034 	movhi	r6,0
 1ec:	d8000015 	stw	zero,0(sp)
 1f0:	000f883a 	mov	r7,zero
 1f4:	31806f04 	addi	r6,r6,444
 1f8:	000b883a 	mov	r5,zero
 1fc:	0009883a 	mov	r4,zero
{ 
 200:	dfc00115 	stw	ra,4(sp)
	alt_ic_isr_register(
 204:	00002180 	call	218 <alt_ic_isr_register>
			timer_irs,
			NULL,
			NULL
	);

	IOWR_ALTERA_AVALON_TIMER_CONTROL(
 208:	00c000c4 	movi	r3,3
 20c:	008000b4 	movhi	r2,2
 210:	10c00135 	stwio	r3,4(r2)
			| ALTERA_AVALON_TIMER_CONTROL_CONT_MSK
	);


	/* Event loop never exits. */
	while (1);
 214:	003fff06 	br	214 <main+0x30>

00000218 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 218:	00002a41 	jmpi	2a4 <alt_iic_isr_register>

0000021c <alt_ic_irq_enable>:
  NIOS2_READ_STATUS (context);
 21c:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 220:	00bfff84 	movi	r2,-2
 224:	1884703a 	and	r2,r3,r2
 228:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
 22c:	00800044 	movi	r2,1
 230:	d1200217 	ldw	r4,-32760(gp)
 234:	114a983a 	sll	r5,r2,r5
 238:	290ab03a 	or	r5,r5,r4
 23c:	d1600215 	stw	r5,-32760(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 240:	d0a00217 	ldw	r2,-32760(gp)
 244:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
 248:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
 24c:	0005883a 	mov	r2,zero
 250:	f800283a 	ret

00000254 <alt_ic_irq_disable>:
  NIOS2_READ_STATUS (context);
 254:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 258:	00bfff84 	movi	r2,-2
 25c:	1884703a 	and	r2,r3,r2
 260:	1001703a 	wrctl	status,r2
  alt_irq_active &= ~(1 << id);
 264:	00bfff84 	movi	r2,-2
 268:	d1200217 	ldw	r4,-32760(gp)
 26c:	114a183a 	rol	r5,r2,r5
 270:	290a703a 	and	r5,r5,r4
 274:	d1600215 	stw	r5,-32760(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 278:	d0a00217 	ldw	r2,-32760(gp)
 27c:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
 280:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
 284:	0005883a 	mov	r2,zero
 288:	f800283a 	ret

0000028c <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 28c:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
 290:	00800044 	movi	r2,1
 294:	1144983a 	sll	r2,r2,r5
 298:	10c4703a 	and	r2,r2,r3
}
 29c:	1004c03a 	cmpne	r2,r2,zero
 2a0:	f800283a 	ret

000002a4 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
 2a4:	28800808 	cmpgei	r2,r5,32
 2a8:	1000161e 	bne	r2,zero,304 <alt_iic_isr_register+0x60>
{
 2ac:	defffe04 	addi	sp,sp,-8
 2b0:	dfc00115 	stw	ra,4(sp)
 2b4:	dc000015 	stw	r16,0(sp)
  NIOS2_READ_STATUS (context);
 2b8:	0021303a 	rdctl	r16,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2bc:	00bfff84 	movi	r2,-2
 2c0:	8084703a 	and	r2,r16,r2
 2c4:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
 2c8:	280690fa 	slli	r3,r5,3
 2cc:	00800074 	movhi	r2,1
 2d0:	10800704 	addi	r2,r2,28
 2d4:	10c5883a 	add	r2,r2,r3
 2d8:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
 2dc:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 2e0:	30000626 	beq	r6,zero,2fc <alt_iic_isr_register+0x58>
 2e4:	000021c0 	call	21c <alt_ic_irq_enable>
  NIOS2_WRITE_STATUS (context);
 2e8:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
 2ec:	dfc00117 	ldw	ra,4(sp)
 2f0:	dc000017 	ldw	r16,0(sp)
 2f4:	dec00204 	addi	sp,sp,8
 2f8:	f800283a 	ret
    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 2fc:	00002540 	call	254 <alt_ic_irq_disable>
 300:	003ff906 	br	2e8 <alt_iic_isr_register+0x44>
  int rc = -EINVAL;  
 304:	00bffa84 	movi	r2,-22
}
 308:	f800283a 	ret

0000030c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 30c:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 310:	01000074 	movhi	r4,1
 314:	01400034 	movhi	r5,0
 318:	dfc00015 	stw	ra,0(sp)
 31c:	21000004 	addi	r4,r4,0
 320:	29410f04 	addi	r5,r5,1084
 324:	21400426 	beq	r4,r5,338 <alt_load+0x2c>
  {
    while( to != end )
    {
      *to++ = *from++;
 328:	01800074 	movhi	r6,1
 32c:	31800104 	addi	r6,r6,4
 330:	310dc83a 	sub	r6,r6,r4
 334:	00004140 	call	414 <memcpy>
  if (to != from)
 338:	01000034 	movhi	r4,0
 33c:	01400034 	movhi	r5,0
 340:	21000804 	addi	r4,r4,32
 344:	29400804 	addi	r5,r5,32
 348:	21400426 	beq	r4,r5,35c <alt_load+0x50>
      *to++ = *from++;
 34c:	01800034 	movhi	r6,0
 350:	31806004 	addi	r6,r6,384
 354:	310dc83a 	sub	r6,r6,r4
 358:	00004140 	call	414 <memcpy>
  if (to != from)
 35c:	01000074 	movhi	r4,1
 360:	01400034 	movhi	r5,0
 364:	21000004 	addi	r4,r4,0
 368:	29410f04 	addi	r5,r5,1084
 36c:	21400426 	beq	r4,r5,380 <alt_load+0x74>
      *to++ = *from++;
 370:	01800074 	movhi	r6,1
 374:	31800004 	addi	r6,r6,0
 378:	310dc83a 	sub	r6,r6,r4
 37c:	00004140 	call	414 <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 380:	00003e00 	call	3e0 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 384:	dfc00017 	ldw	ra,0(sp)
 388:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
 38c:	00003e41 	jmpi	3e4 <alt_icache_flush_all>

00000390 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 390:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 394:	0009883a 	mov	r4,zero
{
 398:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
 39c:	00003bc0 	call	3bc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 3a0:	00003dc0 	call	3dc <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 3a4:	d1a00317 	ldw	r6,-32756(gp)
 3a8:	d1600417 	ldw	r5,-32752(gp)
 3ac:	d1200517 	ldw	r4,-32748(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 3b0:	dfc00017 	ldw	ra,0(sp)
 3b4:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
 3b8:	00001e41 	jmpi	1e4 <main>

000003bc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 3bc:	deffff04 	addi	sp,sp,-4
 3c0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 3c4:	000040c0 	call	40c <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 3c8:	00800044 	movi	r2,1
 3cc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 3d0:	dfc00017 	ldw	ra,0(sp)
 3d4:	dec00104 	addi	sp,sp,4
 3d8:	f800283a 	ret

000003dc <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
}
 3dc:	f800283a 	ret

000003e0 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 3e0:	f800283a 	ret

000003e4 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 3e4:	f800283a 	ret

000003e8 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
 3e8:	213ffe84 	addi	r4,r4,-6
 3ec:	20800428 	cmpgeui	r2,r4,16
 3f0:	1000041e 	bne	r2,zero,404 <alt_exception_cause_generated_bad_addr+0x1c>
 3f4:	00a2c8d4 	movui	r2,35619
 3f8:	1104d83a 	srl	r2,r2,r4
 3fc:	1080004c 	andi	r2,r2,1
 400:	f800283a 	ret
 404:	0005883a 	mov	r2,zero
    return 0;

  default:
    return 0;
  }
}
 408:	f800283a 	ret

0000040c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 40c:	000170fa 	wrctl	ienable,zero
}
 410:	f800283a 	ret

00000414 <memcpy>:
 414:	2005883a 	mov	r2,r4
 418:	0007883a 	mov	r3,zero
 41c:	30c0011e 	bne	r6,r3,424 <memcpy+0x10>
 420:	f800283a 	ret
 424:	28cf883a 	add	r7,r5,r3
 428:	39c00003 	ldbu	r7,0(r7)
 42c:	10c9883a 	add	r4,r2,r3
 430:	18c00044 	addi	r3,r3,1
 434:	21c00005 	stb	r7,0(r4)
 438:	003ff806 	br	41c <memcpy+0x8>
